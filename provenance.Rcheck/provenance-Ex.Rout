
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "provenance"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "provenance-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('provenance')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ALR")
> ### * ALR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ALR
> ### Title: Additive logratio transformation
> ### Aliases: ALR ALR.default ALR.compositional
> 
> ### ** Examples
> 
> # logratio plot of trace element concentrations:
> data(Namib)
> alr <- ALR(Namib$Trace)
> pairs(alr[,1:5])
> title('log(X/Pb)')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ALR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CA")
> ### * CA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CA
> ### Title: Correspondence Analysis
> ### Aliases: CA
> 
> ### ** Examples
> 
> data(Namib)
> plot(CA(Namib$PT))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CLR")
> ### * CLR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CLR
> ### Title: Centred logratio transformation
> ### Aliases: CLR CLR.default CLR.compositional
> 
> ### ** Examples
> 
> # The following code shows that applying provenance's PCA function
> # to compositional data is equivalent to applying R's built-in
> # princomp function to the CLR transformed data.
> data(Namib)
> plot(PCA(Namib$Major))
> dev.new()
> clrdat <- CLR(Namib$Major)
> biplot(princomp(clrdat))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CLR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("KDE")
> ### * KDE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: KDE
> ### Title: Create a kernel density estimate
> ### Aliases: KDE
> 
> ### ** Examples
> 
> data(Namib)
> samp <- Namib$DZ$x[['N1']]
> dens <- KDE(samp,0,3000,kernel="epanechnikov")
> plot(dens)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("KDE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("KDEs")
> ### * KDEs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: KDEs
> ### Title: Generate an object of class 'KDEs'
> ### Aliases: KDEs
> 
> ### ** Examples
> 
> data(Namib)
> KDEs <- KDEs(Namib$DZ,0,3000,pch=NA)
> summaryplot(KDEs,ncol=3)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("KDEs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("KS.diss")
> ### * KS.diss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: KS.diss
> ### Title: Kolmogorov-Smirnov dissimilarity
> ### Aliases: KS.diss
> 
> ### ** Examples
> 
> data(Namib)
> print(KS.diss(Namib$DZ$x[['N1']],Namib$DZ$x[['T8']]))
[1] 0.1653535
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("KS.diss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Kuiper.diss")
> ### * Kuiper.diss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Kuiper.diss
> ### Title: Kuiper dissimilarity
> ### Aliases: Kuiper.diss
> 
> ### ** Examples
> 
> data(Namib)
> print(Kuiper.diss(Namib$DZ$x[['N1']],Namib$DZ$x[['T8']]))
[1] 0.2448485
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Kuiper.diss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MDS")
> ### * MDS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MDS
> ### Title: Multidimensional Scaling
> ### Aliases: MDS MDS.compositional MDS.counts MDS.distributional MDS.diss
> 
> ### ** Examples
> 
> data(Namib)
> plot(MDS(Namib$Major,classical=TRUE))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MDS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Namib")
> ### * Namib
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Namib
> ### Title: An example dataset
> ### Aliases: Namib
> 
> ### ** Examples
> 
> data(Namib)
> samp <- Namib$DZ$x[['N1']]
> dens <- KDE(samp,0,3000)
> plot(dens)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Namib", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("PCA")
> ### * PCA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PCA
> ### Title: Principal Component Analysis
> ### Aliases: PCA
> 
> ### ** Examples
> 
> data(Namib)
> plot(MDS(Namib$Major,classical=TRUE))
> dev.new()
dev.new(): using pdf(file="Rplots1.pdf")
> plot(PCA(Namib$Major),asp=1)
> print("This example demonstrates the equivalence of classical MDS and PCA")
[1] "This example demonstrates the equivalence of classical MDS and PCA"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PCA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SH.diss")
> ### * SH.diss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SH.diss
> ### Title: Sircombe and Hazelton distance
> ### Aliases: SH.diss
> 
> ### ** Examples
> 
> datfile <- system.file("DZ.csv",package="provenance")
> errfile <- system.file("DZerr.csv",package="provenance")
> DZ <- read.distributional(datfile,errfile)
> d <- SH.diss(DZ,1,2)
> print(d)
[1] 0.0008008441
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SH.diss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("amalgamate")
> ### * amalgamate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: amalgamate
> ### Title: Group components of a composition
> ### Aliases: amalgamate amalgamate.default amalgamate.compositional
> ###   amalgamate.counts amalgamate.SRDcorrected
> 
> ### ** Examples
> 
> data(Namib)
> HMcomponents <- c("zr","tm","rt","TiOx","sph","ap","ep",
+                   "gt","st","amp","cpx","opx")
> am <- amalgamate(Namib$PTHM,feldspars=c("KF","P"),
+                  lithics=c("Lm","Lv","Ls"),heavies=HMcomponents)
> plot(ternary(am))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("amalgamate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as.acomp")
> ### * as.acomp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.acomp
> ### Title: create an 'acomp' object
> ### Aliases: as.acomp
> 
> ### ** Examples
> 
> data(Namib)
> qfl <- ternary(Namib$PT,c('Q'),c('KF','P'),c('Lm','Lv','Ls'))
> plot(qfl,type="QFL.dickinson")
> qfl.acomp <- as.acomp(qfl)
> ## uncomment the next two lines to plot an error
> ## ellipse using the compositions package: 
> # library(compositions)
> # ellipses(mean(qfl.acomp),var(qfl.acomp),r=2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.acomp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as.compositional")
> ### * as.compositional
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.compositional
> ### Title: create a 'compositional' object
> ### Aliases: as.compositional
> 
> ### ** Examples
> 
> data(Namib)
> PT.acomp <- as.acomp(Namib$PT)
> PT.compositional <- as.compositional(PT.acomp)
[1] 16
[1] 16
> print(Namib$PT$x - PT.compositional$x)
    Q KF P Lm Lv Ls
N1  0  0 0  0  0  0
N2  0  0 0  0  0  0
N3  0  0 0  0  0  0
N4  0  0 0  0  0  0
N5  0  0 0  0  0  0
N6  0  0 0  0  0  0
N7  0  0 0  0  0  0
N8  0  0 0  0  0  0
N9  0  0 0  0  0  0
N10 0  0 0  0  0  0
N11 0  0 0  0  0  0
N12 0  0 0  0  0  0
N13 0  0 0  0  0  0
N14 0  0 0  0  0  0
T8  0  0 0  0  0  0
T13 0  0 0  0  0  0
> ## uncomment the following lines for an illustration of using this 
> ## function to integrate the \code{provenance} package with \code{compositions}
> # library(compositions)
> # data(Glacial)
> # a.glac <- acomp(Glacial)
> # c.glac <- as.compositional(a.glac)
> # summaryplot(c.glac,ncol=8)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.compositional", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as.data.frame")
> ### * as.data.frame
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.data.frame
> ### Title: create a 'data.frame' object
> ### Aliases: as.data.frame as.data.frame.compositional as.data.frame.counts
> 
> ### ** Examples
> 
> data(Namib)
> Major.frame <- as.data.frame(Namib$Major)
> ## uncomment the next two lines to plot an error
> ## ellipse using the robCompositions package:
> # library(robCompositions)
> # plot(pcaCoDa(Major.frame))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.data.frame", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("botev")
> ### * botev
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: botev
> ### Title: Compute the optimal kernel bandwidth
> ### Aliases: botev
> 
> ### ** Examples
> 
> fname <- system.file("DZ.csv",package="provenance")
> bw <- botev(read.distributional(fname)$x$N1)
> print(bw)
[1] 53.7377
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("botev", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bray.diss")
> ### * bray.diss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bray.diss
> ### Title: Bray-Curtis dissimilarity
> ### Aliases: bray.diss
> 
> ### ** Examples
> 
> data(Namib)
> print(bray.diss(Namib$HM$x["N1",],Namib$HM$x["N2",]))
[1] 0.05797101
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bray.diss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("combine")
> ### * combine
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: combine
> ### Title: Combine samples of distributional data
> ### Aliases: combine
> 
> ### ** Examples
> 
> data(Namib)
> combined <- combine(Namib$DZ,
+                     east=c('N3','N4','N5','N6','N7','N8','N9','N10'),
+                     west=c('N1','N2','N11','N12','T8','T13'))
> summaryplot(KDEs(combined))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("combine", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("densities")
> ### * densities
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: densities
> ### Title: A list of rock and mineral densities
> ### Aliases: densities
> 
> ### ** Examples
> 
> data(Namib,densities)
> N8 <- subset(Namib$HM,select="N8")
> distribution <- minsorting(N8,densities,phi=2,sigmaphi=1,medium="air",by=0.05)
> plot(distribution)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("densities", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("diss")
> ### * diss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: diss
> ### Title: Calculate the dissimilarity matrix between two 'distributional'
> ###   or 'compositional' datasets
> ### Aliases: diss diss.distributional diss.compositional diss.counts
> 
> ### ** Examples
> 
> data(Namib)
> print(round(100*diss(Namib$DZ)))
    N1 N2 N3 N4 N5 N6 N7 N8 N9 N10 N11 N12 N13 N14 T8
N2  18                                               
N3  36 27                                            
N4  44 35 16                                         
N5  42 34 12 17                                      
N6  40 30  7 11 11                                   
N7  37 26 12 18 19 16                                
N8  23 15 23 24 22 19 24                             
N9  35 27 11 16 13 13 12 17                          
N10 34 27  9 17  9  7 12 16 14                       
N11 18 14 27 34 30 26 29 14 23  25                   
N12 20 11 25 33 31 28 25 12 25  24   9               
N13 35 25 21 29 28 23 18 18 20  20  24  17           
N14 29 18 30 38 35 33 28 18 29  28  21  14  16       
T8  17 22 38 47 43 42 38 26 37  36  19  16  24  23   
T13 15 20 30 37 36 33 29 18 29  27  14  15  24  24 14
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("diss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("endmembers")
> ### * endmembers
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: endmembers
> ### Title: Petrographic end-member compositions
> ### Aliases: endmembers
> 
> ### ** Examples
> 
> data(endmembers,densities)
> ophiolite <- subset(endmembers,select="ophiolite")
> plot(minsorting(ophiolite,densities,by=0.05))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("endmembers", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.f")
> ### * get.f
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.f
> ### Title: Calculate the largest fraction that is likely to be missed
> ### Aliases: get.f
> 
> ### ** Examples
> 
> print(get.f(60))
[1] 0.08651961
> print(get.f(117))
[1] 0.04980871
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.f", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.n")
> ### * get.n
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.n
> ### Title: Calculate the number of grains required to achieve a desired
> ###   level of sampling resolution
> ### Aliases: get.n
> 
> ### ** Examples
> 
> # number of grains required to be 99% that no fraction greater than 5% was missed:
> print(get.n(0.01))
[1] 149
> # number of grains required to be 90% that no fraction greater than 10% was missed:
> print(get.n(p=0.1,f=0.1))
[1] 44
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.n", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.p")
> ### * get.p
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.p
> ### Title: Calculate the probability of missing a given population fraction
> ### Aliases: get.p
> 
> ### ** Examples
> 
> print(get.p(60))
[1] 0.6393948
> print(get.p(117))
[1] 0.0486745
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.p", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("indscal")
> ### * indscal
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: indscal
> ### Title: Individual Differences Scaling of provenance data
> ### Aliases: indscal
> 
> ### ** Examples
> 
> data(Namib)
> plot(indscal(Namib$DZ,Namib$HM))
dev.new(): using pdf(file="Rplots2.pdf")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("indscal", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lines.ternary")
> ### * lines.ternary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lines.ternary
> ### Title: Ternary line plotting
> ### Aliases: lines.ternary
> 
> ### ** Examples
> 
> tern <- ternary(Namib$PT,'Q',c('KF','P'),c('Lm','Lv','Ls'))
> plot(tern,pch=21,bg='red',labels=NULL)
> middle <- matrix(c(0.01,0.49,0.01,0.49,0.98,0.02),2,3)
> lines(ternary(middle))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lines.ternary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("minsorting")
> ### * minsorting
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: minsorting
> ### Title: Assess settling equivalence of detrital components
> ### Aliases: minsorting
> 
> ### ** Examples
> 
> data(endmembers,densities)
> distribution <- minsorting(endmembers,densities,sname='ophiolite',phi=2,
+                            sigmaphi=1,medium="seawater",by=0.05)
> plot(distribution,cumulative=FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("minsorting", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.CA")
> ### * plot.CA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.CA
> ### Title: Point-counting biplot
> ### Aliases: plot.CA
> 
> ### ** Examples
> 
> data(Namib)
> plot(CA(Namib$PT))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.CA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.GPA")
> ### * plot.GPA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.GPA
> ### Title: Plot a Procrustes configuration
> ### Aliases: plot.GPA
> 
> ### ** Examples
> 
> data(Namib)
> GPA <- procrustes(Namib$DZ,Namib$HM)
initial  value 10.608343 
iter   5 value 8.868203
iter   5 value 8.867183
iter  10 value 7.883745
iter  15 value 7.637849
final  value 7.619237 
converged
initial  value 6.235306 
iter   5 value 4.414536
iter  10 value 4.327238
iter  10 value 4.325208
iter  10 value 4.324829
final  value 4.324829 
converged
> coast <- c('N1','N2','N3','N10','N11','N12','T8','T13')
> snames <- names(Namib$DZ)
> bgcol <- rep('yellow',length(snames))
> bgcol[which(snames %in% coast)] <- 'red'
> plot(GPA,pch=21,bg=bgcol)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.GPA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.INDSCAL")
> ### * plot.INDSCAL
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.INDSCAL
> ### Title: Plot an INDSCAL group configuration and source weights
> ### Aliases: plot.INDSCAL
> 
> ### ** Examples
> 
> data(Namib)
> coast <- c('N1','N2','N3','N10','N11','N12','T8','T13')
> snames <- names(Namib$DZ)
> pch <- rep(21,length(snames))
> pch[which(snames %in% coast)] <- 22
> plot(indscal(Namib$DZ,Namib$HM),pch=pch)
dev.new(): using pdf(file="Rplots3.pdf")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.INDSCAL", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.KDE")
> ### * plot.KDE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.KDE
> ### Title: Plot a kernel density estimate
> ### Aliases: plot.KDE
> 
> ### ** Examples
> 
> data(Namib)
> samp <- Namib$DZ$x[['N1']]
> dens <- KDE(samp,from=0,to=3000)
> plot(dens)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.KDE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.KDEs")
> ### * plot.KDEs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.KDEs
> ### Title: Plot one or more kernel density estimates
> ### Aliases: plot.KDEs
> 
> ### ** Examples
> 
> data(Namib)
> kdes <- KDEs(Namib$DZ)
> plot(kdes,ncol=2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.KDEs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.MDS")
> ### * plot.MDS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.MDS
> ### Title: Plot an MDS configuration
> ### Aliases: plot.MDS
> 
> ### ** Examples
> 
> data(Namib)
> mds <- MDS(Namib$DZ)
initial  value 10.608343 
iter   5 value 8.868203
iter   5 value 8.867183
iter  10 value 7.883745
iter  15 value 7.637849
final  value 7.619237 
converged
> coast <- c('N1','N2','N3','N10','N11','N12','T8','T13')
> snames <- names(Namib$DZ)
> bgcol <- rep('yellow',length(snames))
> bgcol[which(snames %in% coast)] <- 'red'
> plot(mds,pch=21,bg=bgcol)
dev.new(): using pdf(file="Rplots4.pdf")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.MDS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.PCA")
> ### * plot.PCA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.PCA
> ### Title: Compositional biplot
> ### Aliases: plot.PCA
> 
> ### ** Examples
> 
> data(Namib)
> plot(PCA(Namib$Major))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.PCA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.compositional")
> ### * plot.compositional
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.compositional
> ### Title: Plot a pie chart
> ### Aliases: plot.compositional
> 
> ### ** Examples
> 
> data(Namib)
> plot(Namib$Major,'N1',colmap='heat.colors')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.compositional", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.distributional")
> ### * plot.distributional
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.distributional
> ### Title: Plot continuous data as histograms or cumulative age
> ###   distributions
> ### Aliases: plot.distributional
> 
> ### ** Examples
> 
> data(Namib)
> plot(Namib$DZ,c('N1','N2'))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.distributional", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.minsorting")
> ### * plot.minsorting
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.minsorting
> ### Title: Plot inferred grain size distributions
> ### Aliases: plot.minsorting
> 
> ### ** Examples
> 
> data(endmembers,densities)
> OPH <- subset(endmembers,select="ophiolite")
> distribution <- minsorting(OPH,densities,phi=2,sigmaphi=1,
+                            medium="air",by=0.05)
> plot(distribution,components=c('F','px','opaques'))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.minsorting", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.ternary")
> ### * plot.ternary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.ternary
> ### Title: Plot a ternary diagram
> ### Aliases: plot.ternary
> 
> ### ** Examples
> 
> data(Namib)
> tern <- ternary(Namib$PT,'Q',c('KF','P'),c('Lm','Lv','Ls'))
> plot(tern,type='QFL.descriptive',pch=21,bg='red',labels=NULL)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.ternary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("points.ternary")
> ### * points.ternary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: points.ternary
> ### Title: Ternary point plotting
> ### Aliases: points.ternary lines text
> 
> ### ** Examples
> 
> tern <- ternary(Namib$PT,'Q',c('KF','P'),c('Lm','Lv','Ls'))
> plot(tern,pch=21,bg='red',labels=NULL)
> # add the geometric mean composition as a yellow square:
> gmean <- ternary(exp(colMeans(log(tern$x))))
> points(gmean,pch=22,bg='yellow')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("points.ternary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("procrustes")
> ### * procrustes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: procrustes
> ### Title: Generalised Procrustes Analysis of provenance data
> ### Aliases: procrustes
> 
> ### ** Examples
> 
> data(Namib)
> gpa <- procrustes(Namib$DZ,Namib$HM)
initial  value 10.608343 
iter   5 value 8.868203
iter   5 value 8.867183
iter  10 value 7.883745
iter  15 value 7.637849
final  value 7.619237 
converged
initial  value 6.235306 
iter   5 value 4.414536
iter  10 value 4.327238
iter  10 value 4.325208
iter  10 value 4.324829
final  value 4.324829 
converged
> plot(gpa)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("procrustes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("radialplot")
> ### * radialplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: radialplot
> ### Title: Visualise point-counting data on a radial plot
> ### Aliases: radialplot
> 
> ### ** Examples
> 
> data(Namib)
> radialplot(Namib$PT,components=c('Q','P'))
Warning in plot.xy(xy.coords(x, y), type = type, ...) :
  "components" is not a graphical parameter
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("radialplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.compositional")
> ### * read.compositional
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.compositional
> ### Title: Read a .csv file with compositional data
> ### Aliases: read.compositional
> 
> ### ** Examples
> 
>     fname <- system.file("Major.csv",package="provenance")
>     Major <- read.compositional(fname)
>     plot(PCA(Major))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.compositional", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.counts")
> ### * read.counts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.counts
> ### Title: Read a .csv file with point-counting data
> ### Aliases: read.counts
> 
> ### ** Examples
> 
>     fname <- system.file("HM.csv",package="provenance")
>     Major <- read.counts(fname)
>     #plot(PCA(HM))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.counts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.densities")
> ### * read.densities
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.densities
> ### Title: Read a .csv file with mineral and rock densities
> ### Aliases: read.densities
> 
> ### ** Examples
> 
> data(Namib,densities)
> N8 <- subset(Namib$HM,select="N8")
> distribution <- minsorting(N8,densities,phi=2,sigmaphi=1,medium="air",by=0.05)
> plot(distribution)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.densities", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.distributional")
> ### * read.distributional
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.distributional
> ### Title: Read a .csv file with continuous (detrital zircon) data
> ### Aliases: read.distributional
> 
> ### ** Examples
> 
>     agefile <- system.file("DZ.csv",package="provenance")
>     errfile <- system.file("DZerr.csv",package="provenance")
>     DZ <- read.distributional(agefile,errfile)
>     plot(KDE(DZ$x$N1))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.distributional", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("restore")
> ### * restore
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: restore
> ### Title: Undo the effect of hydraulic sorting
> ### Aliases: restore
> 
> ### ** Examples
> 
> data(Namib,densities)
> rescomp <- restore(Namib$PTHM,densities,2.71)
> HMcomp <- c("zr","tm","rt","sph","ap","ep","gt",
+             "st","amp","cpx","opx")
> amcomp <- amalgamate(rescomp,Plag="P",HM=HMcomp,Opq="opaques")
> plot(ternary(amcomp),showpath=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("restore", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("subset")
> ### * subset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: subset
> ### Title: Get a subset of distributional data
> ### Aliases: subset subset.distributional subset.compositional
> ###   subset.counts
> 
> ### ** Examples
> 
> data(Namib)
> coast <- c("N1","N2","T8","T13","N12","N13")
> ZTRcoast <- subset(Namib$HM,select=coast,components=c('gt','cpx','ep'))
> DZcoast <- subset(Namib$DZ,select=coast)
> summaryplot(ZTRcoast,KDEs(DZcoast),ncol=2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("subset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summaryplot")
> ### * summaryplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summaryplot
> ### Title: Joint plot of several provenance datasets
> ### Aliases: summaryplot
> 
> ### ** Examples
> 
> data(Namib)
> KDEs <- KDEs(Namib$DZ,0,3000)
> summaryplot(KDEs,Namib$HM,Namib$PT,ncol=2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summaryplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ternary")
> ### * ternary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ternary
> ### Title: Define a ternary composition
> ### Aliases: ternary
> 
> ### ** Examples
> 
> data(Namib)
> tern <- ternary(Namib$PT,c('Q'),c('KF','P'),c('Lm','Lv','Ls'))
> plot(tern,type="QFL")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ternary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ternary.ellipse")
> ### * ternary.ellipse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ternary.ellipse
> ### Title: Ternary confidence ellipse
> ### Aliases: ternary.ellipse ternary.ellipse.default
> ###   ternary.ellipse.compositional ternary.ellipse.counts
> 
> ### ** Examples
> 
> data(Namib)
> tern <- ternary(Namib$Major,'CaO','Na2O','K2O')
> plot(tern)
> ternary.ellipse(tern)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ternary.ellipse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("text.ternary")
> ### * text.ternary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: text.ternary
> ### Title: Ternary text plotting
> ### Aliases: text.ternary
> 
> ### ** Examples
> 
> data(Namib)
> tern <- ternary(Namib$Major,'CaO','Na2O','K2O')
> plot(tern,pch=21,bg='red',labels=NULL)
> # add the geometric mean composition as a text label:
> gmean <- ternary(exp(colMeans(log(tern$x))))
> text(gmean,labels='geometric mean')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("text.ternary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  14.152 6.168 12.622 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
